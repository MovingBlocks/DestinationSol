buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}

// Git plugin details at https://github.com/ajoberstar/gradle-git
import org.ajoberstar.gradle.git.tasks.*

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.2.0'
    ext {
        appName = 'DestinationSol'
        gdxVersion = '1.6.1'
        roboVMVersion = '1.2.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.4.0'
        aiVersion = '1.5.0'
    }

    repositories {
        // Good ole Maven central
        mavenCentral()

        // Repos for LibGDX
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }

        // Terasology Artifactory for any shared libs
        maven { url "http://artifactory.terasology.org/artifactory/virtual-repo-live" }
    }
}

tasks.eclipse.doLast {
    delete ".project"
}
cleanIdea.doLast {
    new File('DestinationSol.iws').delete()
}

task (fetchAndroid, type: GitClone) {
    description = 'Git clones the Android facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolAndroid'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('android')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchAndroid requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    if (enabled) {
        uri = "https://github.com/$githubHome/" + repo + ".git"
        //println "Fetching $repo from $uri"
        destinationPath = destination
        bare = false
    }
}

task (fetchGwt, type: GitClone) {
    description = 'Git clones the GWT facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolGwt'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('gwt')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchGwt requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    if (enabled) {
        uri = "https://github.com/$githubHome/" + repo + ".git"
        //println "Fetching $repo from $uri"
        destinationPath = destination
        bare = false
    }
}