buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}
// Git plugin details at https://github.com/ajoberstar/gradle-git
import org.ajoberstar.gradle.git.tasks.*

plugins {
    id 'destination-sol-ide'
    id 'destination-sol-repositories'
    id 'terasology-metrics'
}

repositories {
    // Good ole Maven central
    mavenCentral()

    // Repos for LibGDX
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }

    // Terasology Artifactory for any shared libs
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        allowInsecureProtocol true // TODO: Review this when HTTPS finally supported.
    }

    maven { url "https://maven.google.com" }
}

// Helper that returns a list of all local Destination Sol module projects
def destinationSolModules() {
    subprojects.findAll {it.parent.name == 'modules'}
}

destinationSolModules().forEach { destSolModule ->
    destSolModule.configurations.configureEach {
        resolutionStrategy.dependencySubstitution.all { dependency ->
            if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == "org.destinationsol.modules") {
                destinationSolModules().forEach { otherModule ->
                    if (otherModule.name == dependency.requested.module) {
                        dependency.useTarget otherModule
                    }
                }
            }
        }
    }
}

tasks.eclipse.doLast {
    delete ".project"
}
tasks.eclipse.dependsOn extractMetricsConfig

import org.jetbrains.gradle.ext.Application
idea {
    project {
        // Set JDK
        jdkName = '1.8'
        wildcards -= '!?*.groovy'

        settings {
            compiler {
                enableAutomake = true
            }

            runConfigurations {
                "Desktop"(Application) {
                    mainClass = 'org.destinationsol.desktop.SolDesktop'
                    moduleName 'DestinationSol.desktop.main'
                    workingDirectory = rootDir
                    jvmArgs = '-splash:engine/src/main/resources/assets/textures/mainMenu/mainMenuLogo.png -Xms256m -Xmx1024m -Dlog4j.configuration=log4j-debug.properties'
                    programParameters = '-noSplash -noCrashReport'
                }
            }

            copyright {
                useDefault = 'DestinationSolCopyright'
                profiles {
                    DestinationSolCopyright {
                        notice = 'Copyright 2023 The Terasology Foundation\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.'
                        keyword = 'Copyright'
                        allowReplaceRegexp = ''
                    }
                }
            }

            taskTriggers {
                afterSync tasks.named('extractMetricsConfig')
            }

            generateImlFiles = true
            withIDEAFileXml("compiler.xml", ideaPatchAnnotationProcessors)
            withIDEAFileXml("misc.xml", ideaPatchEntryPoints)
            withIDEAFileXml("checkstyle-idea.xml", ideaPatchCheckstyle)
        }

        ipr {
            withXml { xmlProvider ->
                // Apply a bunch of tweaks to IntelliJ config - all defined in ide.gradle
                // Part reason for separate file was in case a module needs to define something it cannot do so in a project block
                def iprNode = xmlProvider.asNode()
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
                ideaActivateAnnotations(iprNode)
                ideaActivateGit(iprNode)
                ideaActivateGradle(iprNode)
            }

            // Sets sourceCompatibility within IntelliJ (without this root build having the Java plugin applied)
            whenMerged { project ->
                project.jdk.languageLevel = 'JDK_1_8'
            }
        }
    }

    // Tweaks to the .iws
    workspace.iws.withXml { xmlProvider ->
        def iwsNode = xmlProvider.asNode()
        ideaMakeAutomatically(iwsNode)
        ideaRunConfig(iwsNode)
    }
}

cleanIdea.doLast {
    new File('DestinationSol.iws').delete()
    new File('config/metrics').deleteDir()
    println "Cleaned root - don't forget to re-extract code metrics config! 'gradlew extractConfig' will do so, or 'gradlew idea' (or eclipse)"
}

tasks.register('fetchAndroid', GitClone) {
    description = 'Git clones the Android facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolAndroid'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('android')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchAndroid requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    uri = "https://github.com/$githubHome/" + repo + ".git"
    //println "Fetching $repo from $uri"
    destinationPath = destination
    bare = false
}

tasks.register('fetchGwt', GitClone) {
    description = 'Git clones the GWT facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolGwt'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('gwt')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchGwt requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    uri = "https://github.com/$githubHome/" + repo + ".git"
    //println "Fetching $repo from $uri"
    destinationPath = destination
    bare = false
}
