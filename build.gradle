apply from: 'config/gradle/ide.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}
// Git plugin details at https://github.com/ajoberstar/gradle-git
import org.ajoberstar.gradle.git.tasks.*

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    version = '1.4.2'
    ext {
        appName = 'DestinationSol'
        gdxVersion = '1.7.0'
        roboVMVersion = '1.8.0'
    }
}

repositories {
    // Good ole Maven central
    mavenCentral()

    // Repos for LibGDX
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }

    // Terasology Artifactory for any shared libs
    maven { url "http://artifactory.terasology.org/artifactory/virtual-repo-live" }
}

configurations {
    codeMetrics
}

dependencies {
    // Config for our code analytics lives in a centralized repo: https://github.com/MovingBlocks/TeraConfig
    codeMetrics group: 'org.terasology.config', name: 'codemetrics', version: '1.1.0', ext: 'zip'
}

task extractConfig(type: Copy) {
    description = "Extracts our configuration files from the zip we fetched as a dependency"
    from {
        configurations.codeMetrics.collect {
            zipTree(it)
        }
    }
    into "$rootDir/config/metrics"
}

tasks.eclipse.doLast {
    delete ".project"
}

idea {
    project {
        // Set JDK
        jdkName = '1.8'
        wildcards -= '!?*.groovy'

        ipr {
            withXml { xmlProvider ->
                // Apply a bunch of tweaks to IntelliJ config - all defined in ide.gradle
                // Part reason for separate file was in case a module needs to define something it cannot do so in a project block
                def iprNode = xmlProvider.asNode()
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
                ideaActivateAnnotations(iprNode)
                ideaActivateGit(iprNode)
                ideaActivateGradle(iprNode)
            }

            // Sets sourceCompatibility within IntelliJ (without this root build having the Java plugin applied)
            whenMerged { project ->
                project.jdk.languageLevel = 'JDK_1_8'
            }
        }
    }

    // Tweaks to the .iws
    workspace.iws.withXml { xmlProvider ->
        def iwsNode = xmlProvider.asNode()
        ideaMakeAutomatically(iwsNode)
        ideaRunConfig(iwsNode)
    }
}

cleanIdea.doLast {
    new File('DestinationSol.iws').delete()
    new File('config/metrics').deleteDir()
    println "Cleaned root - don't forget to re-extract code metrics config! 'gradlew extractConfig' will do so, or 'gradlew idea' (or eclipse)"
}

task(fetchAndroid, type: GitClone) {
    description = 'Git clones the Android facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolAndroid'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('android')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchAndroid requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    if (enabled) {
        uri = "https://github.com/$githubHome/" + repo + ".git"
        //println "Fetching $repo from $uri"
        destinationPath = destination
        bare = false
    }
}

task(fetchGwt, type: GitClone) {
    description = 'Git clones the GWT facade source from GitHub'

    // Repo name is the dynamic part of the task name
    def repo = 'DestSolGwt'

    // Default GitHub account to use. Supply with -PgithubAccount="TargetAccountName" or via gradle.properties
    def githubHome = 'MovingBlocks'

    def destination = file('gwt')

    // Don't clone this repo if we already have a directory by that name (also determines Gradle UP-TO-DATE)
    enabled = !destination.exists()
    //println "fetchGwt requested for $repo from Github under $githubHome - exists already? " + !enabled

    // Do the actual clone if we don't have the directory already
    if (enabled) {
        uri = "https://github.com/$githubHome/" + repo + ".git"
        //println "Fetching $repo from $uri"
        destinationPath = destination
        bare = false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
