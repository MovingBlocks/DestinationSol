/*
 * Copyright 2022 The Terasology Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'destination-sol-common'
    id 'destination-sol-jre'
}

project.ext.mainClassName = "org.destinationsol.desktop.SolDesktop"

dependencies {
    implementation project(":engine")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"

    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    implementation group: 'org.terasology.crashreporter', name: 'cr-destsol', version: '4.0.0'
}

tasks.register('run', JavaExec) {
    dependsOn classes
    //TODO: Remove extra args when the splash screen works on Macs again - see https://github.com/MovingBlocks/DestinationSol/issues/414
    if (System.properties["os.name"].toLowerCase().contains("mac")) {
        jvmArgs = ["-splash:../engine/src/main/resources/assets/textures/mainMenu/mainMenuLogo.png", "-XstartOnFirstThread", "-Dlog4j.configuration=log4j-debug.properties"]
        String[] runArgs = ["-noSplash"]
        args runArgs
    } else {
        jvmArgs = ["-splash:../engine/src/main/resources/assets/textures/mainMenu/mainMenuLogo.png", "-Dlog4j.configuration=log4j-debug.properties"]
    }
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = rootProject.projectDir
    ignoreExitValue true
}

jar {
    archiveFileName = "solDesktop.jar"

    manifest {
        def manifestClasspath = configurations.runtimeClasspath.collect { it.getName() }.join(" ")
        attributes 'Main-Class': project.mainClassName
        attributes("Class-Path": manifestClasspath)
        attributes "SplashScreen-Image": "mainMenuLogo.png"
    }
}

tasks.register('moduleDist', Copy) {
    into("${distsDirectory.getAsFile().get()}/app/modules")
    rootProject.destinationSolModules().each { module ->
        dependsOn ":modules:$module.name" + ":jar"
        from("$rootDir/modules/${module.name}/build/libs") {
            include "*.jar"
        }
    }
}

tasks.register('copyLaunchers', Copy) {
    description = "Copy launchers into the distribution folder."

    from("$rootDir/launcher")
    include("*.sh", "*.exe")
    into("${distsDirectory.getAsFile().get()}/app")
}

tasks.register('libsDist', Copy) {
    description = "Copy libs directory into the distribution folder."

    dependsOn jar

    from jar
    from configurations.runtimeClasspath
    into("${distsDirectory.getAsFile().get()}/app/libs")
}

tasks.register('distUnbundledJRE') {
    description = "Creates an application package without any bundled JRE."
    group 'Distribution'

    dependsOn libsDist
    dependsOn moduleDist
    dependsOn copyLaunchers
}

tasks.register('distZipUnbundledJRE', Zip) {
    description = "Creates an application package and zip archive without any bundled JRE."
    group 'Distribution'

    dependsOn distUnbundledJRE
    from "${distsDirectory.getAsFile().get()}/app"
    archiveFileName = "DestinationSol.zip"
}

tasks.register('distBundleJREs') {
    description = "Creates an application package with a bundled JRE."
    group 'Distribution'

    dependsOn distUnbundledJRE
    dependsOn downloadJreAll
}

tasks.register('distZipBundleJREs', Zip) {
    description = "Creates an application package and zip archive with a bundled JRE."
    group 'Distribution'

    dependsOn distBundleJREs
    from "${distsDirectory.getAsFile().get()}/app"
    archiveFileName = "DestinationSol.zip"
}

// TODO: LibGDX Generated config for Eclipse. Needs adjustment for assets not being in the Android facade
eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
        file {
            whenMerged { project ->
                def destinationSolRunConfig = new XmlParser().parseText('''
                    <!--<?xml version="1.0" encoding="UTF-8" standalone="no"?>-->
                    <launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
                        <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
                            <listEntry value="/DestinationSol-desktop/src/main/java/org/destinationsol/desktop/SolDesktop.java"/>
                        </listAttribute>
                        <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
                            <listEntry value="1"/>
                        </listAttribute>
                        <booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_CLASSPATH_ONLY_JAR" value="false"/>
                        <booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
                        <stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.destinationsol.desktop.SolDesktop"/>
                        <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="DestinationSol-desktop"/>
                        <stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-splash:../engine/src/main/resources/assets/textures/mainMenu/mainMenuLogo.png -Dlog4j.configuration=log4j-debug.properties"/>
                        <stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="${workspace_loc:DestinationSol-engine}"/>
                    </launchConfiguration>
                ''')
                def writer = new FileWriter(file("DestinationSol.launch"))
                def printer = new XmlNodePrinter(new PrintWriter(writer))
                printer.setPreserveWhitespace(true)
                printer.print(destinationSolRunConfig)
            }
        }
    }
}

tasks.register('afterEclipseImport') {
    description 'Post processing after project generation'
    group 'IDE'

    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

tasks.withType(JavaExec).configureEach {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099', '-Dlog4j.configuration=log4j-debug.properties'
    }
}
