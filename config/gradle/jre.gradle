/*
 * Copyright 2020 The Terasology Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Uses Bellsoft Liberica JRE
def jreVersion = '8u212'
def jreUrlBase = "https://download.bell-sw.com/java/$jreVersion/bellsoft-jre$jreVersion"
def jreUrlFilenames = [
        lwjreLinux64 : 'linux-amd64.tar.gz',
        lwjre        : 'windows-i586.zip',
        lwjreOSX     : 'macos-amd64.zip'
]

task downloadJreAll {
    group 'Download'
    description 'Downloads JRE for all platforms'
}

jreUrlFilenames.each { os, file ->
    def packedJre = new File("$rootDir/jre/$jreVersion/$file")
    def unpackedJre = new File("$distsDir/app/$os")

    def downloadTask = task("downloadJre$os") {
        group 'Download'
        description "Downloads JRE for $os"

        doFirst {
            download {
                src "$jreUrlBase-$file"
                dest packedJre
                overwrite false
            }
        }

        doLast {
            // Unpack the JRE
            if (!unpackedJre.exists()) {
                unpackedJre.mkdirs()
                copy {
                    from(file.endsWith("zip")
                            ? zipTree(packedJre)
                            : tarTree(packedJre)) {
                        eachFile { fcd ->
                            fcd.relativePath = new RelativePath(
                                    true, fcd.relativePath.segments.drop(1))
                        }
                        includeEmptyDirs = false
                    }
                    into unpackedJre
                }
            }
        }
    }

    downloadJreAll.dependsOn downloadTask
}


